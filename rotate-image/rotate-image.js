/**
 * @param {number[][]} matrix
 * @return {void} Do not return anything, modify matrix in-place instead.
 */
var rotate = function(matrix) {
    const n = matrix.length
    
    for(let i=0; i<Math.floor(n / 2); i++) {
        for(let j=i; j<n - i - 1; j++) {
            let tempIndex = matrix[j][n - i - 1];
            let tempIndex2 = matrix[n - i - 1][n - j - 1]
            let tempIndex3 = matrix[n - j - 1][i];
            
            matrix[j][n - i - 1] = matrix[i][j];
            matrix[n - i - 1][n - j - 1] = tempIndex;
            matrix[n - j - 1][i] = tempIndex2;
            matrix[i][j] = tempIndex3;
        }
    }
};

/**
4, 4

[0, 0] => [0, 3] => [3, 3] => [3, 0] => [0, 0]
[0, 1] => [1, 3] => [3, 2] => [2, 0] => [0, 1]
[0, 2] => [2, 3] => [3, 1] => [1, 0] => [0, 2]
/// [0, 3] => [3, 3] => [3, 0] => [0, 0] => [0, 3]

4, 4 => 4, 15 => 15, 15 => 15, 4
0, 1 => 1, 3 => 3, 2 => 

5 1 9 11
2 4 8 10
13 3 6 7
15 14 12 16

1 2 3
4 5 6
7 8 9

1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2
*/
